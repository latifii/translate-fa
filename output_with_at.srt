1
00:00:00,690 --> 00:00:02,910
So to update this @state@ here

2
00:00:02,910 --> 00:00:04,320
in handleAddGoal,

3
00:00:04,320 --> 00:00:08,490
I'll use this @function@ form for updating my @state@

4
00:00:08,490 --> 00:00:11,100
because the @state@ will be updated

5
00:00:11,100 --> 00:00:14,520
based on the previous @state@ snapshot.

6
00:00:14,520 --> 00:00:15,870
And as you also learn

7
00:00:15,870 --> 00:00:18,630
in my "React - The Complete Guide" course,

8
00:00:18,630 --> 00:00:21,750
if your new @state@ depends on the old @state@,

9
00:00:21,750 --> 00:00:24,600
you should use this special @function@ form

10
00:00:24,600 --> 00:00:26,700
for updating the @state@.

11
00:00:26,700 --> 00:00:28,470
Because here you'll automatically

12
00:00:28,470 --> 00:00:32,549
get your previous @state@ snapshot at the point of time

13
00:00:32,549 --> 00:00:34,838
where this @state@ updating @function@ here

14
00:00:34,838 --> 00:00:36,963
is executed by @React@.

15
00:00:37,920 --> 00:00:40,470
And then here in this @function@ body,

16
00:00:40,470 --> 00:00:44,790
you must return the updated array, in this case,

17
00:00:44,790 --> 00:00:46,803
the updated array of goals.

18
00:00:48,270 --> 00:00:51,150
Well, and here where I want to add a new goal,

19
00:00:51,150 --> 00:00:52,920
that in the end just means

20
00:00:52,920 --> 00:00:56,910
that I want to spread my existing goals array

21
00:00:56,910 --> 00:00:58,293
into this new array.

22
00:00:59,130 --> 00:01:03,510
So I wanna copy all the elements of the existing array

23
00:01:03,510 --> 00:01:05,489
into this new array,

24
00:01:05,489 --> 00:01:08,100
and then add a new object,

25
00:01:08,100 --> 00:01:10,830
a new object of that shape

26
00:01:10,830 --> 00:01:14,643
to be precise to the end or beginning of that array.

27
00:01:15,870 --> 00:01:18,720
So here, all created in a separate step

28
00:01:18,720 --> 00:01:20,850
to keep that code readable,

29
00:01:20,850 --> 00:01:23,880
and add a new goal constant here,

30
00:01:23,880 --> 00:01:27,120
which should be of type CourseGoal.

31
00:01:27,120 --> 00:01:30,660
And I'm adding this explicit type assignment here

32
00:01:30,660 --> 00:01:35,660
to force me to set up a correct value here

33
00:01:35,730 --> 00:01:38,130
and to get better autocompletion

34
00:01:38,130 --> 00:01:42,270
where the IDE now suggests these property names.

35
00:01:42,270 --> 00:01:44,040
So that's another use case

36
00:01:44,040 --> 00:01:48,720
for using explicit type assignments to get this extra safety

37
00:01:48,720 --> 00:01:51,780
so that I don't accidentally set up the wrong type

38
00:01:51,780 --> 00:01:54,990
and to get that extra IDE support.

39
00:01:54,990 --> 00:01:57,660
And then here I can set the id,

40
00:01:57,660 --> 00:01:59,910
let's say to Math.random,

41
00:01:59,910 --> 00:02:02,673
which is good enough for this demo project,

42
00:02:03,660 --> 00:02:08,660
set the title to Learn @React@ + TypeScript in this case,

43
00:02:09,990 --> 00:02:12,690
for the moment, it will be hard-coded,

44
00:02:12,690 --> 00:02:17,690
and set description to Learn it in depth,

45
00:02:18,750 --> 00:02:20,640
which of course means that at the moment

46
00:02:20,640 --> 00:02:22,740
we'll always add the same goal,

47
00:02:22,740 --> 00:02:24,540
but that will of course change soon.

48
00:02:26,584 --> 00:02:28,470
And with that, it's now this new goal,

49
00:02:28,470 --> 00:02:30,030
which is added here in my case,

50
00:02:30,030 --> 00:02:34,260
at the end of this returned new @state@ snapshot,

51
00:02:34,260 --> 00:02:36,600
so that new goals array

52
00:02:36,600 --> 00:02:38,970
that were in the end setting up here.

53
00:02:38,970 --> 00:02:42,450
And with that, we can now finally use goals

54
00:02:42,450 --> 00:02:46,863
to dynamically output this list of CourseGoal components.

55
00:02:48,780 --> 00:02:51,960
And that of course works just as you know it.

56
00:02:51,960 --> 00:02:55,590
We can use this goals @state@, and then the map method

57
00:02:55,590 --> 00:02:59,250
to convert this list of CourseGoal objects

58
00:02:59,250 --> 00:03:02,130
to a list of CourseGoal components,

59
00:03:02,130 --> 00:03:03,810
for example.

60
00:03:03,810 --> 00:03:06,630
And for that we pass a @function@ to map

61
00:03:06,630 --> 00:03:09,780
where we get our individual goal

62
00:03:09,780 --> 00:03:11,520
and where we then return the element

63
00:03:11,520 --> 00:03:13,770
we want to output for every goal.

64
00:03:13,770 --> 00:03:16,350
And here I actually want to output a list item,

65
00:03:16,350 --> 00:03:20,073
and then in that list item, my CourseGoal component.

66
00:03:21,120 --> 00:03:23,940
Because I will actually wrap that entire list

67
00:03:23,940 --> 00:03:25,920
with the unordered list element

68
00:03:25,920 --> 00:03:29,193
so that we got a semantically correct piece of code here.

69
00:03:31,620 --> 00:03:34,860
Now what's really great about TypeScript

70
00:03:34,860 --> 00:03:39,420
is how well it's able to understand your code

71
00:03:39,420 --> 00:03:44,070
and infer types in different places of your code.

72
00:03:44,070 --> 00:03:47,940
For example, TypeScript understands how map works

73
00:03:47,940 --> 00:03:51,060
and it understands that this goal,

74
00:03:51,060 --> 00:03:55,290
which we get as a parameter in this @function@ here,

75
00:03:55,290 --> 00:03:57,370
will be of type CourseGoal

76
00:03:58,290 --> 00:04:00,090
because TypeScript understands

77
00:04:00,090 --> 00:04:04,260
that this @function@ here will be executed for us

78
00:04:04,260 --> 00:04:06,570
by the browser in the end.

79
00:04:06,570 --> 00:04:10,110
And that this value will automatically be populated

80
00:04:10,110 --> 00:04:14,040
and that we will get the values of this array here.

81
00:04:14,040 --> 00:04:17,519
And since this array contains a bunch of course goals,

82
00:04:17,519 --> 00:04:21,600
TypeScript understands that an individual item of that array

83
00:04:21,600 --> 00:04:23,583
will be of type CourseGoal.

84
00:04:24,750 --> 00:04:27,630
And that gives us extra type safety

85
00:04:27,630 --> 00:04:29,973
and great autocompletion here.

86
00:04:30,870 --> 00:04:33,060
For example, when setting the title,

87
00:04:33,060 --> 00:04:35,190
I can now type goal.,

88
00:04:35,190 --> 00:04:37,680
and my IDE understands

89
00:04:37,680 --> 00:04:40,530
that I can now either access the title,

90
00:04:40,530 --> 00:04:43,980
description, or id property

91
00:04:43,980 --> 00:04:46,530
because these are the three properties

92
00:04:46,530 --> 00:04:49,113
I set up in my object type here.

93
00:04:50,070 --> 00:04:53,670
And with that, we can output the title here,

94
00:04:53,670 --> 00:04:57,780
and then output goal.description here

95
00:04:57,780 --> 00:04:59,373
between the paragraph tags.

96
00:05:00,210 --> 00:05:02,370
And then on the list item,

97
00:05:02,370 --> 00:05:04,680
also add the special key @prop@

98
00:05:04,680 --> 00:05:08,280
which @React@ once when outputting such a list,

99
00:05:08,280 --> 00:05:11,433
which should be said equal to goal.id here.

100
00:05:13,470 --> 00:05:15,000
And with that,

101
00:05:15,000 --> 00:05:18,120
finally, we can save that all.

102
00:05:18,120 --> 00:05:19,440
And if we go back here,

103
00:05:19,440 --> 00:05:20,850
we got this button

104
00:05:20,850 --> 00:05:25,200
which we can press to output a bunch of course goals.

105
00:05:25,200 --> 00:05:27,870
Again, for the moment, they're all the same,

106
00:05:27,870 --> 00:05:31,710
but we got no error here in the console,

107
00:05:31,710 --> 00:05:33,810
no error in our code,

108
00:05:33,810 --> 00:05:35,730
and also not in the terminal,

109
00:05:35,730 --> 00:05:38,160
and we therefore now also know

110
00:05:38,160 --> 00:05:41,700
how to useState with TypeScript

111
00:05:41,700 --> 00:05:45,000
and how we can make sure that TypeScript understands

112
00:05:45,000 --> 00:05:47,733
which type of value we wanna manage here.

